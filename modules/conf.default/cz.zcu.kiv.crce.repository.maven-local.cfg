# Enables/disables this repository
# Possible values: true, false
repository.enabled=true

#===========================================================#
# CRCE Maven Indexer configuration

#===========================================================#
# URI of CRCE local maven repository
#
# Valid URIs:
# file:/c:/some/dir   <- on windows
# file:///c:/dir/path <- on windows
# file:///home/user/  <- on linux
#
# Examples Local:
# repository.local.uri=file:/C:/mvn_store
# repository.local.uri=mvn_store/test
# repository.local.uri=file:///C:/mvn_store
repository.local.uri=file:///home/brada/dev/crce/mvn-store

# Name of local store
repository.local.name=local

# Whether to update the Lucene index of local repository on indexer startup
repository.local.update-on-startup=true


#===========================================================#
# URI of CRCE remote maven repository
#
# Examples Remote:
# repository.remote.uri=http://maven.kalwi.eu/repo/releases
# repository.remote.uri=http://repo1.maven.org/maven2
# repository.remote.uri=http://relisa-dev.kiv.zcu.cz/nexus/content/groups/public
repository.remote.uri=http://repo1.maven.org/maven2

# Name of remote store
repository.remote.name=central

# Whether to update the Lucene index of the default repository on indexer startup
repository.remote.update-on-startup=false


#===========================================================#
# URI of CRCE maven repository indexing context

# Valid URIs:
# file:/c:/some/dir   <- on windows
# file:///c:/dir/path <- on windows
# file:///home/user/  <- on linux
# 
# Examples:
# indexing.context.uri=file:/C:/mvn_store_index
# indexing.context.uri=mvn_store_index
# 
#indexing.context.uri=file:///C:/mvn_store_index
indexing.context.uri=maven-index


#===========================================================#
# Which maven repository to index: LOCAL, REMOTE
#
# Examples
# repository.primary=LOCAL
# repository.primary=REMOTE
repository.primary=LOCAL



#===========================================================#
# How to resolve artefacts

# DIRECT - only direct dependencies
# TRANSITIVE - whole nested hierarchy
# (TRANSITIVE = DFS algorithm - not recomended, very time consuming, can fail)
resolution.depth=TRANSITIVE

# Which artefacts to analyse for dependencies (Aether download switch)
#   -- POMs (faster, approximate) or JARs (slow, detailed)
#
# POM - aether will try solve artifact by POMS
# JAR -  aether will try solve artifact by JAR
resolution.method=JAR


#===========================================================#
# Which artifact versions will be resolved for dependencies, if
#   exact version is not given 
#
# Enum variants
# resolution.strategy=all
# resolution.strategy=newest
# resolution.strategy=highest-major
# resolution.strategy=highest-minor
# resolution.strategy=highest-micro
# resolution.strategy=highest-qualifier
# resolution.strategy=lowest-minor
# resolution.strategy=lowest-micro
# 
# Must be set also resolve parameter # 
# resolution.strategy=gav
# resolution.strategy.parameters=org.sonatype.nexus:nexus-api:1.5.0
# 
# resolution.strategy=groupid
# resolution.strategy.parameters=org.sonatype.nexus
# 
# resolution.strategy=groupid-artifactid
# resolution.strategy.parameters=org.sonatype.nexus:nexus-api
# 
# Resolve all artifacts with GID an AID and minimal def.version
# resolution.strategy=groupid-artifactid-minversion
# resolution.strategy.parameters=org.sonatype.nexus:nexus-api:1.2.0

resolution.strategy=all

# Enables/disables JMX management of repository
# Possible values: true, false
jmx.enabled=true
