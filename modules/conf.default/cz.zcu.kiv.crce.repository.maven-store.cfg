#===========================================================#
# CRCE Maven Indexer configuration

#===========================================================#
# URI of CRCE local maven repository
#
# Valid URIs:
# file:/c:/some/dir   <- on windows
# file:///c:/dir/path <- on windows
# file:///home/user/  <- on linux
#
# Examples Local:
# local.maven.store.uri=file:/C:/mvn_store
# local.maven.store.uri=mvn_store/test
# 
#local.maven.store.uri=file:///C:/mvn_store
local.maven.store.uri=file:///home/brada/dev/crce/mvn-store

# Name of local store
local.store.name=local_repository

# Whether to update the Lucene index of local repository on indexer startup
local.repository.update=true


#===========================================================#
# URI of CRCE remote maven repository
#
# Examples Remote:
# remote.maven.store.uri=http://maven.kalwi.eu/repo/releases
# remote.maven.store.uri=http://repo1.maven.org/maven2
# remote.maven.store.uri=http://relisa-dev.kiv.zcu.cz/nexus/content/groups/public
remote.maven.store.uri=http://repo1.maven.org/maven2

# Name of remote store
remote.store.name=central

# Whether to update the Lucene index of the default repository on indexer startup
remote.repository.update=false


#===========================================================#
# URI of CRCE maven repository indexing context

# Valid URIs:
# file:/c:/some/dir   <- on windows
# file:///c:/dir/path <- on windows
# file:///home/user/  <- on linux
# 
# Examples:
# indexing.context.uri=file:/C:/mvn_store_index
# indexing.context.uri=mvn_store_index
# 
#indexing.context.uri=file:///C:/mvn_store_index
indexing.context.uri=file:///home/brada/dev/crce/mvn-store-index


#===========================================================#
# Which maven repository to index: local (false) or remote (true)
#
# Examples
# use.remote.maven.store.default=1
# use.remote.maven.store.default=true
use.remote.maven.store.default=true



#===========================================================#
# How to resolve artefacts

# Set finding dependencies - only direct ones (false) or whole nested hierarchy (true)
# (true = DFS algorithm - not recomended, very time consuming, can fail)
aether.find.dependency.hierarchy=false

# Which artefacts to analyse for dependencies (Aether download switch)
#   -- POMs (faster, approximate) or JARs (slow, detailed)
#
# false = aether will try solve artifact by POMS
# true =  aether will try solve artifact by JAR
aether.resolve.artifacts=true


#===========================================================#
# Which artifact versions will be resolved for dependencies, if
#   exact version is not given 
#
# Enum variants
# artifact.resolve=all
# artifact.resolve=newest
# artifact.resolve=highest-major
# artifact.resolve=highest-minor
# artifact.resolve=highest-micro
# artifact.resolve=highest-qualifier
# artifact.resolve=lowest-minor
# artifact.resolve=lowest-micro
# 
# Must be set also resolve parameter # 
# artifact.resolve=gav
# artifact.resolve.param=org.sonatype.nexus:nexus-api:1.5.0
# 
# artifact.resolve=groupid
# artifact.resolve.param=org.sonatype.nexus
# 
# artifact.resolve=groupid-artifactid
# artifact.resolve.param=org.sonatype.nexus:nexus-api
# 
# Resolve all artifacts with GID an AID and minimal def.version
# artifact.resolve=groupid-artifactid-minversion
# artifact.resolve.param=org.sonatype.nexus:nexus-api:1.2.0

artifact.resolve=newest 
